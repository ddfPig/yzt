<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/9/28
 * Time: 15:10
 */

namespace app\index\controller;


use think\Db;
use think\Request;

class Cards extends Home
{
   public function _initialize()
   {
       parent::_initialize(); // TODO: Change the autogenerated stub
   }

    /**会员卡号管理
     * @param Request $request
     * @return mixed
     */
   public function index(Request $request)
   {
        return $this->fetch();
   }

   public function lists(Request $request)
   {
       $map = [];
       $page=$request->param('page/d');
       $limit=$request->param('rows/d');
       $sort = $request->param('sort');
       $order = $request->param('order');

      $shop_id = $request->param('ShopID');
      if($shop_id>0){
          $map['shop_id'] = ['eq',$shop_id];
      }elseif($shop_id == '0'){
          $map['shop_id'] = ['eq',0];
      }

       $map['create_id'] = ['eq',$this->zstUser['tid']];

       $status = $request->param('status','99');

       if($status == -1){
           $map['status'] = ['eq',-1];
      }elseif($status == 1){
           $map['status'] = ['eq',1];
      }elseif($status == '0'){
           $map['status'] = ['eq',0];
       }

       $keys = $request->param('keyword');
       if(!empty($keys)){
           $map['shop_num|shop_name|card_no|card']=['like',"%".$keys."%"];
       }

       $page =$page-1;
       if($page>0){
           $page=$page*$limit;
       }

       $count = Db::name('cards')->where($map)->count('id');
       $field = "shop_num,shop_id,id,shop_name,card_no,card,create_person,FROM_UNIXTIME(create_time, '%Y-%m-%d') as create_time,CASE status WHEN -1 THEN '已作废' WHEN 0 THEN '未使用' ELSE '已使用' END as status";
       $list = Db::name('cards')->field($field)->where($map)->limit($page,$limit)->order($sort,$order)->select();
       $result= [
           'rows'=>$list,
           'total'=>$count
       ];
       return $result;
   }

    /**新建卡池
     * @return mixed
     */
   public function addCards()
   {
       return $this->fetch('addCards');
   }

    /**新建卡池
     * @param Request $request
     */
   public function insertCards(Request $request)
   {
        $params = $request->param();
        /** 批量生成卡池
         * 1.没有门店的情况，生成卡号批次7位随机自增数, 卡号编号自动增长
         * 2.有门店的情况，vip+店铺编号+5位从1开始的自增随机数，每个店铺都从1开始
         */
       Db::startTrans();
       try{
           //不选门店生成卡号
           if($params['ShopID'] == -1){
               $card_queue = $this->getTableSn('T','card_no','zst_cards',4);
               $prefix = 'VIP'.$card_queue;
               for ($i=1;$i<=$params['CardCount'];$i++){
                   $info = [
                       'card_no'=>$card_queue,
                       'card'=>$this->getTableSn($prefix,'card','zst_cards',5),
                       'create_person'=>$this->zstUser['user_name'],
                       'create_time'=>time(),
                       'status'=>0,
                       'create_id'=>$this->zstUser['tid'],
                   ];
                   Db::name('cards')->insert($info);
               }
           }elseif($params['ShopID'] > 0){
               //选中店铺后生成卡号
               $prefix = 'VIP'.$params['ShopCode'];
               $where =" shop_id = " .$params['ShopID'];
               $shop_name = Db::name('shop')->where('shop_id',$params['ShopID'])->value('shop_name');
               for ($i=1;$i<=$params['CardCount'];$i++){
                   $info = [
                       'card_no'=>$params['ShopCode'],
                       'card'=>$this->getTableSn($prefix,'card','zst_cards',5,$where),
                       'shop_id'=>$params['ShopID'],
                       'shop_num'=>$params['ShopCode'],
                       'shop_name'=>$shop_name,
                       'create_person'=>$this->zstUser['user_name'],
                       'create_time'=>time(),
                       'status'=>0,
                       'create_id'=>$this->zstUser['tid'],
                   ];
                   //print_r($info);
                   Db::name('cards')->insert($info);
               }
           }

           Db::commit();
           return  json_encode(['code'=>1,'msg'=>'生成诊疗卡成功']);
       }catch (\Exception $e){
           Db::rollback();
           return  json_encode(['code'=>0,'msg'=>'生成诊疗卡出现错误:'.$e->getMessage()]);
       }

   }

    /**发卡页面
     * @param Request $request
     * @return mixed
     */
   public function allotCards(Request $request)
   {
       return $this->fetch('allotCards');
   }

    /**
     * 发卡操作
     */
   public function runAllotCards(Request $request)
   {
       $params = $request->param();
       if($params['ShopCode']){
           $info = [
               'shop_id' =>$params['ShopID'],
               'shop_num' =>$params['ShopNumber'],
               'shop_name' =>Db::name('shop')->where('shop_id',$params['ShopID'])->value('shop_name'),

           ];

          $result =  Db::name('cards')->where('card_no',$params['ShopCode'])->update($info);
          if($result){
              return json_encode(['code'=>1,'msg'=>'成功分配卡号到店铺']);
          }else{
              return json_encode(['code'=>0,'msg'=>'诊疗卡分配出现错误']);
          }
       }else{
           return json_encode(['code'=>0,'msg'=>'缺少分配的诊疗卡编号']);
       }
   }

   public function cardView()
   {
       echo $this->fetch('cardList');
   }

   public function CheckCardByShopCode(Request $request)
   {
       $map = [];
       $page=$request->param('page/d');
       $limit=$request->param('rows/d');
       $sort=$request->param('sort');
       $order=$request->param('order');

       $keys = $request->param('keyword');
       if(!empty($keys)){
           $map['a.card_no']=['like',$keys."%"];
       }

       $map['a.create_id'] = ['eq',$this->zstUser['tid']];
       $page =$page-1;
       if($page>0){
           $page=$page*$limit;
       }
       $field = "create_id,card_no,count(card) as CardCount,concat_ws('~',MIN(card),MAX(card)) AS CardRange";
       $table_sql = Db::name('cards')->field($field)->where('shop_id',0)->group('card_no')->buildSql();

       $count = Db::table($table_sql.' a')->where($map)->count('card_no');

       $list = Db::table($table_sql.' a')->where($map)->limit($page,$limit)->order($sort,$order)->select();
       $result= [
           'rows'=>$list,
           'total'=>$count
       ];
       return $result;
   }

    /**获取诊所列表
     * @param Request $request
     */
   public function getShopsList(Request $request)
   {
       $tid = $this->zstUser['tid'];
       if($tid){
            $list = Db::name('shop')->where('terminator_id',$tid)->select();
            return $list;
       }
   }

    /**获取单个店铺信息
     * @param Request $request
     */
   public function getShopInfo(Request $request)
   {
       $shop_id = $request->param('id/d');
       $shop_number = Db::name('shop')->where('shop_id',$shop_id)->value('shop_number');
       echo json_encode(['shop_number'=>$shop_number]);
   }


    /**随机号
     * @return bool|string
     */
    public  function  getTableSn($prefix,$field,$table,$length,$where = '')
    {
        if($where){
            $res=Db::query("select count(DISTINCT $field) as count from  $table where $where");
        }else{
            $res=Db::query("select count(DISTINCT $field) as count from  $table ");
        }

        if($res){
            $sn=$prefix.str_pad($res[0]['count']+1,$length,0,STR_PAD_LEFT);

        }else{
            $sn=$prefix.str_pad(1,$length,0,STR_PAD_LEFT);
        }
        return $sn;
    }


    public function excelTo(Request $request)
    {
        $excel = new Api();
        $map='';
        $shop_id = $request->param('ShopID');
        if($shop_id>0){
            $map['shop_id'] = ['eq',$shop_id];
        }elseif($shop_id == '0'){
            $map['shop_id'] = ['eq',0];
        }

        $status = $request->param('status','99');

        if($status == -1){
            $map['status'] = ['eq',-1];
        }elseif($status == 1){
            $map['status'] = ['eq',1];
        }elseif($status == '0'){
            $map['status'] = ['eq',0];
        }

        $map['create_id'] = ['eq',$this->zstUser['tid']];

        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['shop_num|shop_name|card_no|card']=['like',"%".$keys."%"];
        }
        $field = "shop_num,shop_id,id,shop_name,card_no,card,create_person,FROM_UNIXTIME(create_time, '%Y-%m-%d') as create_time,CASE status WHEN -1 THEN '已作废' WHEN 0 THEN '未使用' ELSE '已使用' END as status";
        $excel_table = Db::name('cards')->field($field)->where($map)->buildSql();

        $excel_field = [
            'status'=>'status',
            'shop_id'=>'诊所ID',
            'shop_num'=>'诊所编号',
            'shop_name'=>'诊所名称',
            'card_no'=>'生成编号',
            'card'=>'诊疗卡号',
            'create_person'=>'创建人',
            'create_time'=>'创建日期',
        ];

        $fileName = '诊所卡记录表_' . time();
        $sheetNmae = '诊所卡';
        $excel->excelDown($excel_table,$excel_field,$map=[],$fileName,$sheetNmae,2);


    }












}