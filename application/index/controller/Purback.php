<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/9/15
 * Time: 12:02
 */

namespace app\index\controller;

use app\index\Model\MedicineModel;
use app\index\Model\ProbackModel;
use app\index\Model\PurbackModel;
use app\index\Model\Supplier;
use think\Controller;
use think\Db;
use think\Request;

class Purback extends Home
{
     protected $backpru;
     protected $backdata;
     protected $med;
    protected $supplyer;
     public function _initialize()
     {
         parent::_initialize(); // TODO: Change the autogenerated stub
         $this->backpru = new PurbackModel();
         $this->backdata = new ProbackModel();
         $this->supplyer = new Supplier();
         $this->med = new MedicineModel();
     }

    /**退货单页面
     * @return mixed
     */
     public function index()
     {
         return $this->fetch();
     }

    /**退货单数据
     * @param Request $request
     */
     public function lists(Request $request)
     {
         $map = [];

         $keys = $request->param('keyword');
         if(!empty($keys)){
             $map['backpur_number|supplier_code|SupplyName|contactor|contactor_phone']=['like',$keys."%"];
         }

         $page=$request->param('page/d','1');
         $limit=$request->param('rows/d','10');
         $page =$page-1;
         if($page>0){
             $page=$page*$limit;
         }
          //var_dump($this->backpru);exit;
         $map['clinic_id']= ['eq',$this->zstUser['shop_id']];
         $count = $this->backpru->where($map)->count('backpur_id');
         $list = $this->backpru->where($map)->order('backpur_id desc')->limit($page,$limit)->select();
         $result= [
             'rows'=>$list,
             'total'=>$count
         ];
         return $result;
     }

    /**退货单新建页面
     * @return mixed
     */
     public function backAdd()
     {
         $this->assign('sn',$this->getTableSn('Bh','backpur_number','zst_purback'));
         return $this->fetch('backAdd');
     }

    /**退货单添加操作
     * @param Request $request
     */
     public function backInsert(Request $request)
     {
         $data = $request->param();
         $store = json_decode($data['detail'],true);
         //验证数据
         //var_dump($store);exit;

         //生成采购订单数据
         $pur_data = [
             'backpur_uid'=>UUID(),
             'backpur_number'=>$data['backpur_number'],
             'create_time'=>strtotime($data['create_time']),
             'confirm_time'=>strtotime($data['confirm_time']),
             'supplier_code'=>$data['supplier_code'],
             'SupplyID'=>$data['SupplyID'],
             'backmoney'=>$data['purtotal'],
             'ytbackmoney'=>$data['puryftotal'],
             'daohuotime'=>strtotime($data['daohuotime']),
             'SHDH'=>$data['SHDH'],
             'contactor'=>$data['contacts_person'],
             'contactor_phone'=>$data['contacts_phone'],
             'info'=>$data['info'],
             'operater'=>$data['operater'],
             'SupplyName'=>$data['supplier_name'],
             'clinic_id'=>$this->zstUser['shop_id'],
             'addtime'=>time(),
             'update_time'=>time(),
         ];




         //入库操作
         //Db::startTrans();
         try{
             //采购
             $bid =  Db::name('purback')->insertGetId($pur_data);
             //生成库存数据
             $stdata = [];
             foreach ($store as $v){
                 $other = $this->med->where('id',$v['id'])->find();
                 $store_data = [
                     'backsuid'=>UUID(),
                     'code'=>$v['code'],
                     'price'=>$v['price'],
                     'zl_status'=>$v['zl_status'],
                     'LastPrice'=>$v['LastPrice']>0?$v['LastPrice']:$v['price'],
                     'MoneyAccount'=>$v['MoneyAccount'],
                     'MoneyAccount2'=>$v['MoneyAccount2'],
                     'pnumber'=>$v['pnumber'],
                     'Piece'=>$v['Piece'],
                     'innumber'=>$v['innumber'],

                     'clinic_id'=>$this->zstUser['shop_id'],
                     'SupplyID'=>$data['SupplyID'],
                     'backuid'=>$bid,
                     'purnumbers'=>$data['backpur_number'],
                     'medid'=>$v['id'],
                     'create_time'=>time(),
                     'update_time'=>time(),
                 ];
                 $stdata[] = $store_data;
             }
             $res = Db::name('proback')->insertAll($stdata);

             if($bid && $res ){
                 Db::commit();
                 return  json_encode(['code'=>1,'msg'=>'保存退货单成功','pid'=>$data['backpur_number']]);
             }

         }catch (\Exception $e){
             Db::rollback();
             return json_encode(['code'=>0,'msg'=>'保存退货单失败'.$e->getMessage()]);
         }
     }


    /**确认入库
     * @param Request $request
     */
    public function runConfirm(Request $request)
    {
        $backpur_number = $request->param('backpur_number');

        Db::startTrans();
        try{
            $res = Db::name('purback')->where('backpur_number',$backpur_number)
                ->where('clinic_id',$this->zstUser['shop_id'])
                ->setField('backpur_status',1);
            $res2 = Db::name('proback')->where('purnumbers',$backpur_number)
                ->where('clinic_id',$this->zstUser['shop_id'])
                ->setField('is_conform',1);
            Db::name('proback')->where('purnumbers',$backpur_number)
                ->where('clinic_id',$this->zstUser['shop_id'])
                ->setField('intime',time());



            //出库减库存
            //获取该单号下的明细
            $backlist = Db::name('proback')->where('purnumbers',$backpur_number)->where('clinic_id',$this->zstUser['shop_id'])->select();

            foreach ($backlist as $v){
                $isExistYp = Db::name('warehouse')->where('code',$v['code'])->where('clinic_id',$this->zstUser['shop_id'])->find();

                if($isExistYp){
                    //存在更新数量
                    $wareUpdateData = [

                        'innumber'=> Db::raw('innumber-'.$v['innumber']),
                        //'MoneyAccount'=>$isExistYp['MoneyAccount'],
                        'Piece'=>Db::raw('Piece-'.$v['Piece']),
                        'box_number'=>$v['box_number'],
                        'update_time'=>time(),
                    ];

                    Db::name('warehouse')->where('code',$v['code'])->update($wareUpdateData);
                }

            }


            if($res!==false  && $res2!==false){
                Db::commit();
                return  json_encode(['code'=>1,'msg'=>'出库成功']);
            }
        }catch (\Exception $e){
            Db::rollback();
            return json_encode(['code'=>0,'msg'=>'出库失败'.$e->getMessage()]);
        }
    }



    /**退货单修改页面
     * @param Request $request
     */
    public function backEdit(Request $request)
    {

        //获取采购数据
        $pid = $request->param('pid');
        $purData = $this->backpru->where(array('backpur_number'=>$pid))
                 ->where('clinic_id',$this->zstUser['shop_id'])
            ->find();
        $this->assign('pur',$purData);
        return $this->fetch('backEdit');
    }


    /**修改采购单下的数据
     * @param Request $request
     */
    public function getBack(Request $request)
    {
        $pid = $request->param('pid');


        $count = $this->backdata->alias('a')
                                ->join('zst_medicine b','a.medid=b.id')
                                ->join('zst_yxq c','b.effect_id=c.yxq_id','LEFT')
                                ->join('zst_dwgl d','b.unit_id=d.dwgl_id','LEFT')
                                ->join('zst_jxgl e','b.dosage_id=e.jxgl_id','LEFT')
                                ->where(array('purnumbers'=>$pid))
                                ->where('a.clinic_id',$this->zstUser['shop_id'])
                                ->count('backs_id');
        $field = "a.*,b.code,b.uname,b.name,b.approval_number,b.specification,b.box_number,c.yxq_month,d.dwgl_name,e.jxgl_name";
        $list = $this->backdata->alias('a')->field($field)
                            ->join('zst_medicine b','a.medid=b.id')
                            ->join('zst_yxq c','b.effect_id=c.yxq_id','LEFT')
                            ->join('zst_dwgl d','b.unit_id=d.dwgl_id','LEFT')
                            ->join('zst_jxgl e','b.dosage_id=e.jxgl_id','LEFT')
                            ->where(array('purnumbers'=>$pid))
                            ->where('a.clinic_id',$this->zstUser['shop_id'])
                            ->select();

        $result= [
            'rows'=>$list,
            'total'=>$count
        ];
        return $result;


    }

    /**退货单修改操作
     * @param Request $request
     */
    public function backUpdate(Request $request)
    {
        $data = $request->param();
        $store = json_decode($data['detail'],true);
        //验证数据
        //var_dump($store);exit;

        //生成退货订单数据
        $pur_data = [
            //'pid'=>$data['pid'],
            'backpur_uid'=>UUID(),
            'backpur_number'=>$data['backpur_number'],
            'create_time'=>strtotime($data['create_time']),
            'confirm_time'=>strtotime($data['confirm_time']),
            'supplier_code'=>$data['supplier_code'],
            'SupplyID'=>$data['SupplyID'],
            'backmoney'=>$data['purtotal'],
            'ytbackmoney'=>$data['puryftotal'],
            'daohuotime'=>strtotime($data['daohuotime']),
            'SHDH'=>$data['SHDH'],
            'contactor'=>$data['contacts_person'],
            'contactor_phone'=>$data['contacts_phone'],
            'info'=>$data['info'],
            'operater'=>$data['operater'],
            'SupplyName'=>$data['supplier_name'],
            'clinic_id'=>$this->zstUser['shop_id'],
            'addtime'=>time(),
            'update_time'=>time(),
        ];

        Db::startTrans();
        try{
            $res = Db::name('purback')->where('backpur_id',$data['pid'])->update($pur_data);

            //添加新数据
            if(isset($data['insertinfo']) && !empty($data['insertinfo'])){
                $insert_data = json_decode($data['insertinfo'],true);
                $indata = [];
                foreach ($insert_data as $v){
                    $store_data = [
                        'backsuid'=>UUID(),
                        'code'=>$v['code'],
                        'price'=>$v['price'],
                        'zl_status'=>$v['zl_status'],
                        'LastPrice'=>$v['LastPrice']>0?$v['LastPrice']:$v['price'],
                        'MoneyAccount'=>$v['MoneyAccount'],
                        'MoneyAccount2'=>$v['MoneyAccount2'],
                        'pnumber'=>$v['pnumber'],
                        'Piece'=>$v['Piece'],
                        'innumber'=>$v['innumber'],
                        'clinic_id'=>$this->zstUser['shop_id'],
                        'SupplyID'=>$data['SupplyID'],
                        'backuid'=>$data['pid'],
                        'purnumbers'=>$data['backpur_number'],
                        'medid'=>$v['id'],
                        'create_time'=>time(),
                        'update_time'=>time(),
                    ];
                    $indata[] = $store_data;
                }
                //var_dump($indata);exit;
                $res2 = Db::name('proback')->insertAll($indata);

            }

            //更新原有数据
            if(isset($data['updateinfo']) && !empty($data['updateinfo'])){
                $update_data = json_decode($data['updateinfo'],true);
                foreach ($update_data as $vt){
                    $store_data = [
                        'price'=>$vt['price'],

                        'zl_status'=>$vt['zl_status'],
                        'LastPrice'=>$vt['LastPrice']>0?$vt['LastPrice']:$vt['price'],
                        'MoneyAccount'=>$vt['MoneyAccount'],
                        'MoneyAccount2'=>$vt['MoneyAccount2'],
                        'pnumber'=>$vt['pnumber'],
                        'Piece'=>$vt['Piece'],
                        'innumber'=>$vt['innumber'],
                    ];
                    Db::name('proback')->where('backs_id',$vt['backs_id'])->update($store_data);
                }
            }

            //删除数据

            if(isset($data['deleteinfo']) && !empty($data['deleteinfo'])){
                $update_data = json_decode($data['deleteinfo'],true);
                foreach ($update_data as $vp){
                    Db::name('proback')->where('backs_id',$vp['backs_id'])->delete();
                }
            }

            Db::commit();
            return  json_encode(['code'=>1,'msg'=>'保存退货单成功']);

        }catch (\Exception $e){
            Db::rollback();
            return json_encode(['code'=>0,'msg'=>'保存退货单失败'.$e->getMessage()]);
        }




    }

    public function dataToExcel(Request $request)
    {
        $excel = new Api();
        $map = [];

        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['backpur_number|supplier_code|SupplyName|contactor|contactor_phone']=['like',$keys."%"];
        }


        $map['clinic_id']= ['eq',$this->zstUser['shop_id']];

        $field = "backpur_number,if(backpur_status=1,'已出库','未出库') as backpur_status,backmoney,ytbackmoney,FROM_UNIXTIME(create_time, '%Y-%m-%d') as create_time,FROM_UNIXTIME(confirm_time, '%Y-%m-%d') as confirm_time,SHDH,supplier_code,SupplyName,contactor,contactor_phone,operater,printor,FROM_UNIXTIME(print_time, '%Y-%m-%d') as print_time,info";
        $excel_table = Db::name('purback')->field($field)
                                               ->where($map)
                                               ->order('backpur_id desc')
                                               ->buildSql();


        $excel_field = [
            'backpur_number'=>'单据编号',
            'backpur_status'=>'出库状态',
            'backmoney'=>'采购总金额',
            'ytbackmoney'=>'应付总金额',
            'create_time'=>'创建时间',
            'confirm_time'=>'确认时间',
            'SHDH'=>'随货同行单号',
            'supplier_code'=>'供应商编码',
            'SupplyName'=>'供应商名称',
            'contactor'=>'联系人',
            'contactor_phone'=>'联系电话',
            'operater'=>'operater',
            //'isqk'=>'结算状态',
            'printor'=>'打印人',
            'print_time'=>'打印日期',
            'info'=>'备注',
        ];

        $fileName = '退货出库记录表_' . date('Ymd',time());
        $sheetNmae = '退货单记录';
        $excel->excelDown($excel_table,$excel_field,$map=[],$fileName,$sheetNmae,2);

    }

    /**退货新建--选择供应商弹窗
     * @param Request $request
     */
    public function SelSupply(Request $request)
    {
        echo  $this->fetch('SelSupply');
    }

    /**退货新建--选择供应商
     * @param Request $request
     */
    public function getYP(Request $request)
    {
        $map = [];
        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['supplier_scode|supplier_name']=['like',$keys."%"];
        }


        $page=$request->param('page/d','1');
        $limit=$request->param('rows/d','10');
        $page =$page-1;
        if($page>0){
            $page=$page*$limit;
        }

        $count = $this->supplyer->where(array('supply_type'=>0))
            ->where(array('check_type'=>1))
            ->where(array('clinic_id'=>1))
            ->where($map)
            ->where(array('clinic_id'=>$this->zstUser['shop_id']))
            ->count('id');


        $list = $this->supplyer->where(array('supply_type'=>0))
            ->where(array('check_type'=>1))
            ->limit($page,$limit)
            ->where($map)
            ->where(array('clinic_id'=>$this->zstUser['shop_id']))
            ->select();
        $result= [
            'rows'=>$list,
            'total'=>$count
        ];
        return $result;
    }

    /**退货新建--获取商品弹窗
     * @param Request $request
     */
    public function SelPro(Request $request)
    {
        echo  $this->fetch('SelProduct');
    }

    /**退货新建--获取商品信息
     * @param Request $request
     * @return mixed
     */
    public function getMed(Request $request)
    {
        $map = [];
        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['code|uname']=['like',$keys."%"];
        }


        $page=$request->param('page/d','1');
        $limit=$request->param('rows/d','10');
        $page =$page-1;
        if($page>0){
            $page=$page*$limit;
        }


        $subQuery = Db::name('store')->field('medid,IFNULL(LastPrice,\'0.00\') as LastPrice')
            ->order('intime desc')
            ->where('clinic_id',$this->zstUser['shop_id'])
            ->limit(1)
            ->buildSql();

        $count = $this->med->field('a.*,IFNULL(`b`.`LastPrice`, \'0.00\') AS LastPrice,c.yxq_month as yxq_month,d.dwgl_name as dwgl_name')
            ->alias('a')
            ->join($subQuery.'as b','a.id=b.medid','LEFT')
            ->join('zst_yxq c','a.effect_id=c.yxq_id','LEFT')
            ->join('zst_dwgl d','a.unit_id=d.dwgl_id','LEFT')
            ->where(array('check_type'=>1))
            ->where(array('sales_type'=>0))
            ->where('a.clinic_id',$this->zstUser['shop_id'])
            ->where($map)
            ->count('a.id');


        //'a.*,IFNULL(`b`.`LastPrice`, \'0.00\') AS LastPrice,c.yxq_month as effect_id,d.dwgl_name as unit_id'
        $info = $this->med->field('a.*,IFNULL(`b`.`LastPrice`, \'0.00\') AS LastPrice,c.yxq_month as yxq_month,d.dwgl_name as dwgl_name')
            ->alias('a')
            ->join($subQuery.'as b','a.id=b.medid','LEFT')
            ->join('zst_yxq c','a.effect_id=c.yxq_id','LEFT')
            ->join('zst_dwgl d','a.unit_id=d.dwgl_id','LEFT')
            ->where(array('check_type'=>1))
            ->where(array('sales_type'=>0))
            ->where('a.clinic_id',$this->zstUser['shop_id'])
            ->where($map)
            ->limit($page,$limit)
            ->select();

        $result= [
            'rows'=>$info,
            'total'=>$count
        ];
        return $result;
    }


    /**退货单编号
     * @return bool|string
     */
    public  function  getTableSn($prefix,$field,$table)
    {
        $res=Db::query("select count(DISTINCT $field) as count from  $table ");
        if($res){
            $sn=$prefix.date('Ymd').str_pad($res[0]['count']+1,5,0,STR_PAD_LEFT);

        }else{
            $sn=$prefix.date('Ymd').str_pad(1,5,0,STR_PAD_LEFT);
        }
        return $sn;
    }
















}