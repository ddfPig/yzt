<?php
/**
 * Created by PhpStorm.
 * User: 塞外天涯
 * Contact: ddf-128@163.com
 * Wechat:dd283681008
 * Date: 2018/9/17 19:44
 */


namespace app\index\controller;


use think\Controller;
use think\Db;
use think\Request;
use think\Validate;

class Rule extends Home
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }


   public function index()
   {
       return $this->fetch();
   }

    /**系统菜单
     * @param Request $request
     * @return multitype
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
   public function lists(Request $request)
   {
       $map = [];
       $pid = $request->param('id');
       if($pid){
           $map['pid'] = ['eq',$pid];
       }

       $field = "id,name,title,level,pid,sort,status";
       $list = Db::name('auth_rule')->field($field)->where($map)->order('sort')->select();

       $lists = $this->category($list);
       return $lists;
   }

    /**权限列表
     * @param Request $request
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function ruleLists(Request $request)
    {
        $map = [];
        $rid = $request->param('rid');
        $rule = Db::name('auth_group')->where('id',$rid)->find();
        $arr = explode(',',$rule['rules']);
        $list = Db::name('auth_rule')->field('id,name,title,pid')->order('sort')->select();
        foreach ($list as $k=>$v){
            $list[$k]['Flag']  = 0;
            foreach ($arr as $t){
                if(intval($v['id']) == intval($t)){
                    $list[$k]['Flag']  = 1;
                }
            }
        }

        return $list;
    }

    /**
     * 得到分类级数，并将他们的上下级关系，体现在返回数组中
     * @param unknown $category
     * @param number $parent_id
     * @param number $level
     * @return multitype:array
     */
    function category($category,$parent_id=0,$level=0){
        $arr=array();
        foreach($category as $k=>$v){
            if($v['pid']==$parent_id){
                $v['level']=$level;
                $v['children']=$this->category($category,$v['id'],$level+1);
                $arr[]=$v;
            }
        }
        return $arr;
    }


    public function addRule()
   {

        $list = Db::name('auth_rule')->order('sort')->select();
        $arr = $this->rule($list);
        $this->assign('list',$arr);

       return $this->fetch('addRule');
   }

    public function rule($cate , $lefthtml = '─' , $pid=0 , $lvl=0, $leftpin=0 ){
        $arr=array();
        foreach ($cate as $v){
            if($v['pid']==$pid){
                $v['lvl']=$lvl + 1;
                $v['leftpin']=$leftpin + 0;//左边距
                $v['lefthtml']='├'.str_repeat($lefthtml,$lvl);
                $arr[]=$v;
                $arr= array_merge($arr,self::rule($cate,$lefthtml,$v['id'],$lvl+1 , $leftpin+20));
            }
        }
        return $arr;
    }

  public function insertRule(Request $request)
  {
      $data = $request->param();

      //验证
      $rule = [
          ['title','require|unique:auth_rule','请输入菜单名称|已存在相同菜单名称'],
          ['name','require','请输入菜单路径'],
          ['sort','number','排序字段必须输入数字'],

      ];

      $validate = new Validate($rule);
      $valResult   = $validate->check($data);
      if(!$valResult){
          return json_encode(['code'=>0,'msg'=>$validate->getError()]);
      }



      $pid=Db::name('auth_rule')->where(array('id'=>$data['pid']))->field('level')->find();
      $level=$pid['level']+1;

      $sldata=array(
          'name'=>$data['name'],
          'title'=>$data['title'],
          'status'=>$data['status'],
          'sort'=>$data['sort'],
          'addtime'=>time(),
          'pid'=>$data['pid'],
          'level'=>$level,
      );
      $result = Db::name('auth_rule')->insert($sldata);
      if($result!==false){
            return json_encode(['code'=>1,'msg'=>'权限菜单添加成功']);
      }else{
            return json_encode(['code'=>0,'msg'=>'权限菜单添加失败']);
      }


  }

    /**ID: ID, Field: Field, Value: Value
     * @param Request $request
     */
  public function updateRule(Request $request)
  {
      $params = $request->param();
      $res = Db::name('auth_rule')->where('id',$params['ID'])
                                       ->setField($params['Field'],$params['Value']);



  }



  /** 分配权限展示页面
     * @param Request $request
     * @return mixed
   */
  public function setRule(Request $request)
  {
      $role_id = $request->param('RoleID');
      $groups = Db::name('auth_group')->field('id,title,rules')
                                              ->where('id', $role_id)
                                              ->where('status', 1)
                                              ->find();
      $this->assign('roleid', $role_id);
      $this->assign('groups', $groups);
      return $this->fetch('rule');
  }

    /**角色配置权限操作
     * @param Request $request
     * @return string
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     */
  public function accessRule(Request $request)
  {
      $new_rules = $request->param('new_rules');
      $id = $request->param('id');
      $result = Db::name('auth_group')->where('id',$id)->update(['rules'=>$new_rules]);
      if($result!==false){
          return json_encode(['code'=>1,'msg'=>'权限配置成功']);
      }else{
          return json_encode(['code'=>0,'msg'=>'权限配置失败']);
      }
  }




}