<?php
/**
 * Created by PhpStorm.
 * AccountModel: Administrator
 * Date: 2018/9/12
 * Time: 12:32
 */

namespace app\index\controller;


use app\index\Model\AccountModel;
use app\index\Model\ShopModel;
use app\index\Validate\User;
use think\Controller;
use think\Db;
use think\Request;
use think\Validate;

class Account extends Home
{
   protected $account;
   protected $shop;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->account = new AccountModel();
        $this->shop = new ShopModel();
    }

    /**用户列表
     * @param Request $request
     * @return mixed
     */
    public function lists(Request $request)
    {
        return $this->fetch('list');
    }

    /**获取数据
     * @param Request $request
     * @return array
     * @throws \think\exception\DbException
     */
    public function lists2(Request $request)
    {
        $map='';
        $status = $request->param('status','');
        //终端经理
        if($this->zstUser['role_short'] == 'zd'){
            $map['terminator_id'] = ['eq',$this->zstUser['tid']];
        }elseif($this->zstUser['role_short'] == 'kf'){
            $ids = Db::name("terminalm")->where('terminalm_pkfgl_id',$this->zstUser['kid'])->column('id');
            $map['terminator_id'] = ['in',$ids];
        }

        if($status != ''){
            $map['shop_status']= ['eq',$status];
        }
        $tyid = $request->param('tyid','');
        if($tyid != ''){
            $map['shop_type']= ['eq',$tyid];
        }

        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['shop_name|contactor|mobile']=['like',$keys."%"];
        }

        $page=$request->param('page/d');
        $limit=$request->param('rows/d');
        $page =$page-1;
        if($page>0){
            $page=$page*$limit;
        }

        $count = $this->shop->alias('a')
                            ->join('zst_pkfgl b','a.customor_id=b.id','LEFT')
                            ->join('zst_terminalm g','a.terminator_id=g.id','LEFT')
                            ->join('zst_city c','a.province=b.ID','LEFT')
                            ->join('zst_city d','a.city=b.ID','LEFT')
                            ->join('zst_city e','a.town=b.ID','LEFT')
                            ->where($map)
                            ->count('shop_id');
        $list = $this->shop->field("a.shop_scope,a.shop_id,a.shop_status,a.shop_type,a.shop_number,a.shop_name,a.province,a.city,a.town,a.contactor,a.mobile,a.open_time,if(a.busniss_date=0,'长期',a.busniss_date) as busniss_date,c.Name as province,d.Name as city,e.Name as town,b.pkfgl_name as customor_id,g.name as terminator_id")->alias('a')
                            ->join('zst_pkfgl b','a.customor_id=b.id','LEFT')
                            ->join('zst_terminalm g','a.terminator_id=g.id','LEFT')
                            ->join('zst_city c','a.province=c.ID','LEFT')
                            ->join('zst_city d','a.city=d.ID','LEFT')
                            ->join('zst_city e','a.town=e.ID','LEFT')
                           ->where($map)
                           ->limit($page,$limit)
                           ->select();
        $result= [
            'rows'=>$list,
            'total'=>$count
        ];
        return $result;
    }

    /**用户添加页面
     * @return mixed
     */
    public function listAdd()
    {
        $province = $this->getProvince();

        if(isset($this->zstUser['tid']) && $this->zstUser['role_short'] == 'zd'){
            //获取自己的客服
            $mykfid = Db::name('terminalm')->where('id',$this->zstUser['tid'])->value('terminalm_pkfgl_id');
            $mykf = Db::name('pkfgl')->field('id,pkfgl_name')->where('id',$mykfid)->find();

            $this->assign('mykf',$mykf);
        }



        $this->assign('province',$province);
        $this->assign('sn',$this->getTableSn('Y','shop_number','zst_shop'));
        return $this->fetch('list_add');
    }

    /**
     * 客服弹出窗
     */
    public function getServicer()
    {
         echo   $this->fetch('serviceList');
    }

    /**
     * 获取客服数据
     */
    public function servicelist(Request $request)
    {
        $map = [];
        $page=$request->param('page/d');
        $limit=$request->param('rows/d');
        $page =$page-1;
        if($page>0){
            $page=$page*$limit;
        }

        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['pkfgl_name|pkfgl_id|pkfgl_phone|pkfgl_landline|pkfgl_qq|pkfgl_email']=['like',"%".$keys."%"];
        }

       $map['pkfgl_state'] = ['eq',1];

        $count = Db::name('pkfgl')->limit($page,$limit)->where($map)
                                       ->count('id');
        $list = Db::name('pkfgl')->limit($page,$limit)->where($map)
                                      ->select();
        $result= [
            'rows'=>$list,
            'total'=>$count
        ];
        return $result;
    }


    /**
     * 角色弹出窗
     */
    public function getRole()
    {
        echo $this->fetch('getRole');
    }

    /**获取角色列表
     * @param Request $request
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getRoleList(Request $request)
    {
        $page=$request->param('page/d');
        $limit=$request->param('rows/d');
        $page =$page-1;
        if($page>0){
            $page=$page*$limit;
        }
        $count = Db::name('auth_group')->limit($page,$limit)->order('id desc')->count('id');
        $list =  Db::name('auth_group')->limit($page,$limit)->order('id desc')->select();

        $result= [
            'rows'=>$list,
            'total'=>$count
        ];
        return $result;
    }

    /**
     * 终端经理页面
     */
    public function zdmanage()
    {
        echo $this->fetch('zdmanage');
    }

    /**终端经理
     * @param Request $request
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function zdList(Request $request)
    {
        $page=$request->param('page/d');
        $limit=$request->param('rows/d');
        $page =$page-1;
        if($page>0){
            $page=$page*$limit;
        }

        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['number|phone|fixedphone|qq|email|name']=['like',"%".$keys."%"];
        }

        $map['state'] = ['eq',1];

        $count = Db::name('terminalm')->limit($page,$limit)->where($map)
            ->count('id');
        $list = Db::name('terminalm')->limit($page,$limit)->where($map)
            ->select();
        $result= [
            'rows'=>$list,
            'total'=>$count
        ];
        return $result;
    }

    /**
     * 获取资质列表
     */
    public function zzView(Request $request){
        $this->assign('shop_id',$request->param('shop_id/d'));
        echo $this->fetch('zzgl');
    }

    /**
     * 资质信息查询
     */
    public  function zz_lists(){
        $keyword=input('get.keyword');
        $shop_id = input('shop_id/d');

        $page = Request::instance()->param('page');
        $rows = Request::instance()->param('rows');
        $start = ($page-1)*$rows;
        if($keyword){
            $where['zzgl_name']=['like',"%".$keyword."%s"];
        }else{
            $where=null;
        }
        $where['zzgl_state'] = 1;
        $where['clinic_id'] = ['eq',$shop_id];
        //资质
        $data=db('dic_zzgl')->where('zzgl_state',1)->where($where)->limit($start,$rows)->select();
        $count=db('dic_zzgl')->where('zzgl_state',1)->where($where)->limit($start,$rows)->count();
        $arr=[
            "rows"=>$data,
            "total"=>$count,
        ];
        echo json_encode($data);
    }

    /**修改时获取资质信息
     * @param Request $request
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getZizhi(Request $request)
    {
        $sid = $request->param('shop_id/d');
        $field = "id,certificate_type,certificate_num,organization,scope,certificate_name,certificate_identity,certificate_contacts,imgurl,certificate_test,FROM_UNIXTIME(certificate_atime, '%Y-%m-%d') as certificate_atime,FROM_UNIXTIME(certificate_stime, '%Y-%m-%d') as certificate_stime";
        $count=db('clinic_certificate')->where('clinic_id',$sid)->count();
        $list=db('clinic_certificate')->field($field)->where('clinic_id',$sid)->select();

        $result= [
            'rows'=>$list,
            'total'=>$count
        ];
        return $result;
    }



    /**用户添加操作
     * @param Request $request
     * @return \think\response\Json
     */
    public function listRunInsert(Request $request)
    {
        $data = $request->param();

        //数据验证
        $valdate = new User();
        $val = $valdate->scene('add')->check($data);
        if(true !== $val){
             return json_encode(['code'=>0,'msg'=>$valdate->getError()]);
        }

        $shop_data =[
            'customor_id'=>$data['serviceID'],
            'terminator_id'=>$data['zdID'],
            'shop_type'=>!empty($data['shop_type'])?$data['shop_type']:1,
            'shop_number'=>$data['shop_number'],
            'shop_name'=>$data['shop_name'],
            'licence'=>$data['licence'],
            'shop_address'=>$data['shop_address'],
            'province'=>$data['province'],
            'city'=>$data['city'],
            'town'=>$data['town'],
            'leader'=>$data['leader'],
            'contactor'=>$data['contactor'],
            'mobile'=>$data['mobile'],
            'create_time'=>time(),
            'update_time'=>time(),
            'open_time'=>strtotime($data['open_time']),
            //'exoire_time'=>strtotime($data['exoire_time']),
            'mark'=>$data['mark'],
            'shop_open' =>1,
            'shop_status' =>1,
            'bank_num'=>$data['bank_num'],
            'bank_name'=>$data['bank_name'],
            'bank_type'=>$data['bank_type'],
            'shop_scope'=>$data['shop_scope'],
        ];

        if(isset($data['checkbox']) && $data['checkbox']=='on'){
            $shop_data['busniss_date'] = 0;
        }else{
            $atime=strtotime($data['open_time']);
            $stime=strtotime($data['busniss_date']);
            if($atime>=$stime){
                die(json_encode(array('status'=>0,'msg'=>'营业期限请大于成立日期')));
            }

            $shop_data['busniss_date'] = $data['busniss_date'];
        }

        //验证
        $admin_pwd_salt=random(10);

        Db::startTrans();
        try{

            //店铺表
            $isertId = Db::name('shop')->insertGetId($shop_data);

            //资质表
//            $detail = json_decode($data['detail'],true);
//            $certificate_data = [];
//            foreach ($detail as $v){
//                $sdata = [
//                    'clinic_id'=>$isertId,
//                    'certificate_type'=>$v['certificate_type'],
//                    'certificate_num'=>$v['certificate_num'],
//                    'organization'=>$v['organization'],
//                    'certificate_atime'=>strtotime($v['certificate_atime']),
//                    'certificate_stime'=>strtotime($v['certificate_stime']),
//                    'scope'=>$v['scope'],
//                    'certificate_name'=>$v['certificate_name'],
//                    'certificate_identity'=>$v['certificate_identity'],
//                    'certificate_contacts'=>$v['certificate_contacts'],
//                    'imgurl'=>$v['imgurl'],
//                    'certificate_test'=>$v['certificate_test'],
//                ];
//                $certificate_data[] = $sdata;
//            }
//            $res = Db::name('clinic_certificate')->insertAll($certificate_data);



            //登录表
            $user_data =[
                'admin_uid'=>UUID(),
                'admin_user'=>$data['admin_user'],
                'admin_pwd_salt'=>$admin_pwd_salt,
                'admin_pass'=>encrypt_password($data['admin_pass'],$admin_pwd_salt),
                'shop_id'=>$isertId,
            ];
            $admin_id = Db::name('account')->insertGetId($user_data);


            //职员表
            $clerk_data =[
                'is_boss'=>1,
                'shop_id'=>$isertId,
                'admin_id'=>$admin_id,
                'clerk_office_id'=>0,
                'clerk_office_num'=>'',
                'clerk_status'=>1,
                'clerk_name'=>$data['leader']?$data['leader']:$data['contactor'],
                'clerk_phone'=>$data['mobile']?$data['mobile']:'',
                'clerk_office_type'=>1,
                'creator_atime'=>time(),
            ];

            $result3 = Db::name('clerk')->insert($clerk_data);

            //角色关联表
            $accdata=array(
                'uid'=>$admin_id,
                'group_id'=>$data['roleID'],
            );
            $result3 = Db::name('auth_group_access')->insert($accdata);

            //诊所与终端人员关系表
            $rel_shop = [
                'tid' => $data['zdID'],
                'shop_id'=>$isertId,
            ];

            Db::name('terminalm_shop')->insert($rel_shop);

            //收款方式默认
            $payType= [
               ['skfs_state'=>1,'skfs_name'=>'余额','skfs_issystem'=>1,'clinic_id'=>$isertId],
               ['skfs_state'=>1,'skfs_name'=>'现金','skfs_issystem'=>1,'clinic_id'=>$isertId],
                ['skfs_state'=>1,'skfs_name'=>'记账','skfs_issystem'=>1,'clinic_id'=>$isertId]
            ];

            Db::name('skfs')->insertAll($payType);

            if($admin_id && $isertId && $result3){
                Db::commit();
                return json_encode(['code'=>1,'msg'=>'用户添加成功']);
            }

        }catch (\Exception $e)
        {
             Db::rollback();
            return json_encode(['code'=>0,'msg'=>'添加时出现错误,请查阅帮助文档!'.$e->getMessage()]);
        }

    }

    /**修改诊所页面
     * @param Request $request
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function listEdit(Request $request)

    {
        $shop_id = $request->param('aid/d','0');
        $field = "a.*,b.*,c.id as sid,c.pkfgl_name,g.id as gid,g.name,f.id as fid,f.title";
        $info = $this->shop->field($field)->alias('a')
                            ->join('zst_account b','a.shop_id = b.shop_id','left')
                            ->join('zst_pkfgl c','a.customor_id=c.id','LEFT')
                            ->join('zst_terminalm g','a.terminator_id=g.id','LEFT')
                            ->join('zst_auth_group_access e','b.admin_id=e.uid','LEFT')
                            ->join('zst_auth_group f','e.group_id=f.id','LEFT')
                            ->where('a.shop_id',$shop_id)->find();

        $provincelist=db('city')->where('type',0)->order('orderNo')->select();

        $this->assign('info',$info);
        $this->assign('province',$provincelist);
        return $this->fetch('list_edit');
    }

    /**修改诊所操作
     * @param Request $request
     * @return string
     */
    public function listRunUpdate(Request $request)
    {
        $data = $request->param();
        //验证

        //数据验证
        $valdate = new User();
        $val = $valdate->scene('edit')->check($data);
        if(true !== $val){
            return json_encode(['code'=>0,'msg'=>$valdate->getError()]);
        }




        $admin_pwd_salt=random(10);
        $user_data =[
            'admin_uid'=>$data['admin_uid'],
            'admin_user'=>$data['admin_user'],
        ];

        if($data['admin_pass']){
            //如果填写密码就验证密码
            $val = $valdate->scene('pwd')->check($data);
            if(true !== $val){
                return json_encode(['code'=>0,'msg'=>$valdate->getError()]);
            }
            $user_data['admin_pwd_salt']=$admin_pwd_salt;
            $user_data['admin_pass']=encrypt_password($data['admin_pass'],$admin_pwd_salt);
        }

        Db::startTrans();
        try{

            //用户表
            $result = Db::name('account')->where('admin_uid',$user_data['admin_uid'])->update($user_data);
            //诊所表
            $shop_data =[
                //'shop_id'=>$data['shop_id'],
                'customor_id'=>$data['serviceID'],
                'terminator_id'=>$data['zdID'],
                'shop_type'=>$data['shop_type'],
                'shop_number'=>$data['shop_number'],
                'shop_name'=>$data['shop_name'],
                'licence'=>$data['licence'],
                'shop_address'=>$data['shop_address'],
                'province'=>$data['province'],
                'city'=>$data['city'],
                'town'=>$data['town'],
                'leader'=>$data['leader'],
                'contactor'=>$data['contactor'],
                'mobile'=>$data['mobile'],
                'create_time'=>time(),
                'update_time'=>time(),
                'open_time'=>strtotime($data['open_time']),
               // 'exoire_time'=>strtotime($data['exoire_time']),
                'mark'=>$data['mark'],
                'bank_num'=>$data['bank_num'],
                'bank_name'=>$data['bank_name'],
                'bank_type'=>$data['bank_type'],
                'shop_scope'=>$data['shop_scope'],
            ];

            if(isset($data['checkbox']) && $data['checkbox']=='on'){
                $shop_data['busniss_date'] = 0;
            }else{
                $atime=strtotime($data['open_time']);
                $stime=strtotime($data['busniss_date']);
                if($atime>=$stime){
                    return json_encode(array('status'=>0,'msg'=>'营业期限必须要大于成立日期'));
                }
                $shop_data['busniss_date'] = $data['busniss_date'];
            }


            $result2 = Db::name('shop')->where('shop_id',$data['shop_id'])->update($shop_data);

            //资质表
            //1.添加新数据
            if(isset($data['insertinfo']) && !empty($data['insertinfo'])){
                $insert_data = json_decode($data['insertinfo'],true);
                $indata = [];
                foreach ($insert_data as $v){
                    $sdata = [
                        'clinic_id' =>$data['shop_id'],
                        'certificate_type'=>$v['certificate_type'],
                        'certificate_num'=>$v['certificate_num'],
                        'organization'=>$v['organization'],
                        'certificate_atime'=>strtotime($v['certificate_atime']),
                        'certificate_stime'=>strtotime($v['certificate_stime']),
                        'scope'=>$v['scope'],
                        'certificate_name'=>$v['certificate_name'],
                        'certificate_identity'=>$v['certificate_identity'],
                        'certificate_contacts'=>$v['certificate_contacts'],
                        'imgurl'=>$v['imgurl'],
                        'certificate_test'=>$v['certificate_test'],
                    ];
                    $indata[] = $sdata;
                }
                $res = Db::name('clinic_certificate')->insertAll($indata);
            }

            //2更新原有数据
            if(isset($data['updateinfo']) && !empty($data['updateinfo'])){
                $update_data = json_decode($data['updateinfo'],true);
                foreach ($update_data as $vt){
                    $store_data = [
                        'certificate_type'=>$vt['certificate_type'],
                        'certificate_num'=>$vt['certificate_num'],
                        'organization'=>$vt['organization'],
                        'certificate_atime'=>strtotime($vt['certificate_atime']),
                        'certificate_stime'=>strtotime($vt['certificate_stime']),
                        'scope'=>$vt['scope'],
                        'certificate_name'=>$vt['certificate_name'],
                        'certificate_identity'=>$vt['certificate_identity'],
                        'certificate_contacts'=>$vt['certificate_contacts'],
                        'imgurl'=>$vt['imgurl'],
                        'certificate_test'=>$vt['certificate_test'],
                    ];
                    Db::name('clinic_certificate')->where('id',$vt['id'])->update($store_data);
                }

            }

            //删除数据
            if(isset($data['deleteinfo']) && !empty($data['deleteinfo'])){
                $update_data = json_decode($data['deleteinfo'],true);
                foreach ($update_data as $vp){
                    Db::name('clinic_certificate')->where('id',$vp['id'])->delete();
                }
            }




            //职员表
            $clerk_data =[
                'clerk_name'=>$data['leader']?$data['leader']:$data['contactor'],
                'clerk_phone'=>$data['mobile']?$data['mobile']:'',
            ];

            $result3 = Db::name('clerk')->where('admin_id',$data['admin_id'])->update($clerk_data);

            //角色关联表

            $accdata=array(
                'uid'=>$data['admin_id'],
                'group_id'=>$data['roleID'],
            );
            $result4 = Db::name('auth_group_access')->where('uid',$data['admin_id'])->update($accdata);

            //诊所与终端人员关系表
            Db::name('terminalm_shop')->where('shop_id',$data['shop_id'])->setField('tid',$data['zdID']);

            //if($result && $result2 && $result3 && $result4){
                Db::commit();
                return json_encode(['code'=>1,'msg'=>'用户修改成功']);
           // }

        }catch (\Exception $e){
            Db::rollback();
            return json_encode(['code'=>0,'msg'=>'用户修改出现错误,请查阅帮助文档!'.$e->getMessage()]);
        }

    }

    /**诊所移交
     * @param Request $request
     */
    public function transformShop(Request $request)
    {
         $shop = Db::name('shop')->alias('a')->field('shop_id,shop_name,b.name,b.id as tid')
                                       ->join('zst_terminalm b','a.terminator_id=b.id')
                                      ->where('shop_id',$request->param('aid/d'))
                                      ->find();
         $this->assign('shop',$shop);
         return $this->fetch('transformShop');
    }

    /**店铺移交操作
     * @param Request $request
     * @return string
     */
    public function transformToShop(Request $request)
    {
        $params = $request->param();
        if(empty($params['newzdID'])){
            return json_encode(['code'=>0,'msg'=>'对不起,没有选择新的终端经理']);
        }

        if($params['newzdID'] == $params['oldzdID']){
            return json_encode(['code'=>0,'msg'=>'对不起,与原有的的终端经理选择一致']);
        }
        Db::startTrans();
        try{
            $result = Db::name('terminalm_shop')->where('shop_id',$params['shop_id'])->setField('tid',$params['newzdID']);
            $result2 = Db::name('shop')->where('shop_id',$params['shop_id'])->setField('terminator_id',$params['newzdID']);

            //诊疗卡移交
            $create_person = Db::name('terminalm')->where('id',$params['newzdID'])->value('name');
            $update_cards = [
                'create_person'=>$create_person,
                'create_id'=>$params['newzdID'],
            ];

            Db::name('cards')->where('shop_id',$params['shop_id'])->update($update_cards);

            if($result && $result2){
                Db::commit();
                return json_encode(['code'=>1,'msg'=>'诊所已成功移交']);
            }
        }catch (\Exception $e){
               Db::rollback();
            return json_encode(['code'=>0,'msg'=>'诊所移交过程中出现问题，请查看帮助文档!'.$e->getMessage()]);
        }
    }

    /**开通操作
     * @param Request $request
     * @return string
     */
    public function accountStatus(Request $request)
    {
        $ids = $request->param('arr/a');
        $ty = $request->param('ty','0');
        if(is_array($ids))
        {
            $where = 'shop_id in('.implode(',',$ids).')';
        }
       if($ty ==1){   //启用
           $result = $this->shop->where($where)->setField('shop_status',1);
           $msg = '开通成功';
       }else{   //停用
           $result = $this->shop->where($where)->setField('shop_status',0);
           $msg = '开通失败';
       }

        if($result!==false){
            return json_encode(['code'=>1,'msg'=>$msg]);
        }else{
            return json_encode(['code'=>0,'msg'=>$msg]);
        }


    }

    /**导出数据
     * @param Request $request
     * @throws \PHPExcel_Exception
     * @throws \PHPExcel_Reader_Exception
     * @throws \think\Exception
     * @throws \think\exception\DbException
     */
    public function dataToExcel(Request $request)
    {
        $excel = new Api();
        $map='';
        $status = $request->param('status','');


        if($status != ''){
            $map['shop_status']= ['eq',$status];
        }
        $tyid = $request->param('tyid','');
        if($tyid != ''){
            $map['shop_type']= ['eq',$tyid];
        }

        $keys = $request->param('keyword');
        if(!empty($keys)){
            $map['shop_name|contactor|mobile']=['like',$keys."%"];
        }

        $field = "if(a.shop_open=1,'已审核','未审核') as shop_open,if(a.shop_status=1,'已启用','未启用') as shop_status,if(a.shop_type=1,'连锁','个体') as shop_type,a.shop_number,a.shop_name,a.licence,a.leader,a.contactor,a.mobile,a.busniss_date,a.bank_num,a.bank_name,a.bank_type,a.shop_scope,a.shop_address,a.mark,c.Name as province,d.Name as city,e.Name as town,b.pkfgl_name as customor_id,f.name as terminator_id,FROM_UNIXTIME(a.create_time, '%Y-%m-%d') as create_time,FROM_UNIXTIME(a.open_time, '%Y-%m-%d') as open_time,FROM_UNIXTIME(a.exoire_time, '%Y-%m-%d') as exoire_time";
        $excel_table = Db::name('shop')->field($field)->alias('a')
                    ->join('zst_pkfgl b','a.customor_id=b.id','LEFT')
                    ->join('zst_terminalm f','a.terminator_id=f.id','LEFT')
                    ->join('zst_city c','a.province=c.ID','LEFT')
                    ->join('zst_city d','a.city=d.ID','LEFT')
                    ->join('zst_city e','a.town=e.ID','LEFT')
                    ->where($map)
                    ->buildSql();

        $excel_field = [
            'shop_open'=>'审核状态',
            'shop_status'=>'启用状态',
            'shop_type'=>'类型',
            'shop_number'=>'用户编号',
            'shop_name'=>'诊所名称',
            'licence'=>'执行许可证',
            'leader'=>'负责人',
            'contactor'=>'联系人',
            'mobile'=>'联系电话',
            'create_time'=>'注册时间',
            'open_time'=>'开通时间',
            'exoire_time'=>'到期时间',
            'busniss_date'=>'营业期限',
            'bank_num'=>'银行账号',
            'bank_name'=>'开户户名',
            'bank_type'=>'开户银行',
            'shop_scope'=>'经营范围',
            'customor_id'=>'关联客服人员',
            'terminator_id'=>'关联终端经理',
            'province'=>'省',
            'city'=>'市',
            'town'=>'区',
            'shop_address'=>'经营场所',
            'mark'=>'备注',

        ];

        $fileName = '诊所商铺表_' . time();
        $sheetNmae = '诊所商铺表';
        $excel->excelDown($excel_table,$excel_field,$map=[],$fileName,$sheetNmae,2);
    }



    /**用户编号
     * @return bool|string
     */
    public  function  getTableSn($prefix,$field,$table)
    {
        $res=Db::query("select count(DISTINCT $field) as count from  $table ");
        if($res){
            $sn=$prefix.str_pad($res[0]['count']+1,4,0,STR_PAD_LEFT);

        }else{
            $sn=$prefix.str_pad(1,4,0,STR_PAD_LEFT);
        }
        return $sn;
    }

    /**获取所有省份
     * @return mixed
     */
    public function getProvince()
    {
        $provincelist=db('city')->where('type',0)->order('orderNo')->select();

        return $provincelist;
    }


}